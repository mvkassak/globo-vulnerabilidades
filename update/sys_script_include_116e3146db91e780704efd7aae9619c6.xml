<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_glom_vln.VulnfixEventUtils</api_name>
        <client_callable>false</client_callable>
        <description>Script para manipulação de eventos (POST na API do Vulnfix)</description>
        <name>VulnfixEventUtils</name>
        <script><![CDATA[var VulnfixEventUtils = Class.create();
VulnfixEventUtils.prototype = {
  handling: {},
  request: {},

  _inserted: null,

  initialize: function () {},

  /******************** Obtém registro de vulnerabilidade ********************/
  _getVuln: function (id) {
    var gr = new GlideRecord('x_glom_vln_requisicoes');
    gr.addEncodedQuery('sys_id=' + id);
    gr.query();
    if (gr.next()) {
      this._log('Vulnerability Found');
      var _id = gr.sys_id.toString();
      var ref = gr.correlation_id.toString();
      var num = gr.number.toString();
      return {
        sys_id: _id,
        reference_id: ref,
        vulnerability: num
      };
    } else {
      this._log('Vulnerability Not Found');
      return undefined;
    }
  },
  /*********************** Insere Registro de Evento ************************/
  _registerEvent: function () {
    var gr = new GlideRecord('x_glom_vln_event_vulnerability');

    gr.initialize();
    for (var field in this.handling) {
      switch (field) {
        case 'vln':
          gr['reference_id'] = this.handling[field].reference_id;
          gr['vulnerability'] = this.handling[field].sys_id;
          break;
        case 'user':
          gr['user'] = this.handling[field].sys_id;
          break;
        case 'new_status':
          gr['new_status'] = this.handling[field].num;
          break;
        case 'last_status':
          gr['last_status'] = this.handling[field].num;
          break;
        case 'new_substatus':
          gr['new_substatus'] = this.handling[field].num;
          break;
        case 'last_substatus':
          gr['last_substatus'] = this.handling[field].num;
          break;
        default:
          gr[field] = this.handling[field];
      }
    }
    var id = gr.insert();
    this._inserted = id;

    this._log('Event Created');


    return gr.sys_id;
  },

  /***************************** Obtém usuário ******************************/
  _getUser: function (id) {
    var gr = new GlideRecord('sys_user');
    gr.addEncodedQuery('user_name=' + id);
    gr.query();

    if (gr.next()) {
      this._log('User Found');
      return {
        sys_id: gr.sys_id.toString(),
        email: gr.email.toString()
      };
    } else {
      this._log('User Not Found');
      return undefined;
    }

  },

  /********************** Determina falha de inserção **********************/
  _setFailure: function (id, code) {
    var gr = new GlideRecord('x_glom_vln_event_vulnerability');
    gr.get(id);

    gr.status = '-1';
    gr.error_code = code.toString();

    gr.update();
    this._log('Post on VulnFix API has failed');
  },

  /********************** Determina sucesso de inserção **********************/
  _setSuccess: function (id, code) {
    var gr = new GlideRecord('x_glom_vln_event_vulnerability');
    gr.get(id);

    gr.status = '1';
    gr.error_code = code.toString();

    gr.update();
    this._log('Post on VulnFix API done successfully');
  },

  /************************* Obtém último comentário *************************/
  _getComment: function () {

    var gr = new GlideRecord('x_glom_vln_requisicoes');
    gr.get(this.handling.vln.sys_id);
    var comments = gr.comments.getJournalEntry(1);
    if (comments) {
      this._log('Last inserted comment found');
	  if (comments.indexOf('(Inserir mais informações)') != -1) {
		//  gs.info('Globo comentários portugues' + comments);
		  return comments.split('(Inserir mais informações)')[1].trim();
	  } else if (comments.indexOf('(Additional comments)') != -1) {
		 // gs.info('Globo comentários ingles' + comments);
        return comments.split('(Additional comments)')[1].trim();
	 } else {
		// gs.info('Globo comentários undefined' + comments);
		 return undefined;
	}
	}
  },

  /***************************** Obtém Status *****************************/
  _getStatus: function (num) {
    var val;
    switch (parseInt(num)) {
      case 100:
        val = {
          num: 100,
          desc: "Aguardando atendimento"
        };
        break;
      case 101:
        val = {
          num: 101,
          desc: "Em analise"
        };
        break;
      case 102:
        val = {
          num: 102,
          desc: "Solucionado"
        };
        break;
      case 103:
        val = {
          num: 103,
          desc: "Cancelado"
        };
        break;
      case 104:
        val = {
          num: 104,
          desc: "Risco aceito"
        };
        break;
      case 105:
        val = {
          num: 105,
          desc: "Aguardando tratamento"
        };
        break;
      case 106:
        val = {
          num: 106,
          desc: "Em tratamento"
        };
        break;
      case 107:
        val = {
          num: 107,
          desc: "Em avalicacao"
        };
        break;
      default:

        val = null;
    } //End Case Status
    if (val) this._log('State handling done successfully');
    else this._log('State handling failed');
    return val;
  },

  /***************************** Obtém Status *****************************/
  _getSubstatus: function (num) {
    var val;
    switch ((num) ? parseInt(num) : 0) {
      case 200:
        val = {
          num: 200,
          desc: "Acordo de risco"
        };
        break;
      case 201:
        val = {
          num: 201,
          desc: "Fila alterada"
        };
        break;
      case 202:
        val = {
          num: 202,
          desc: "Pendente fornecedor"
        };
        break;
      case 203:
        val = {
          num: 203,
          desc: "Dependente de CHG"
        };
        break;
      case 204:
        val = {
          num: 204,
          desc: "Em avaliação"
        };
        break;
      case 207:
        val = {
          num: 207,
          desc: "Pendente Parceiro / UN"
        };
        break;
      default:
        val = null;
    } //End Case Status
    if (val) this._log('Substate handling done successfully');
    else this._log('Substate handling failed');
    return val;
  },

  /***************************** Ontém body para API *****************************/
  _getBody: function () {
    switch (this.handling.action) {
      case 'vuln.create':
      case 'vuln.access':
        this.request.action = this.handling.action;
        this.request.user = this.handling.user.email;
        this.request.vulnerability = this.handling.vln.vulnerability;
        this.request.reference_id = this.handling.vln.reference_id.toString();
        break;
      case 'vuln.update.comment':
        this.request.action = this.handling.action;
        this.request.user = this.handling.user.email;
        this.request.vulnerability = this.handling.vln.vulnerability;
        this.request.reference_id = this.handling.vln.reference_id.toString();
        this.request.comment = this.handling.comment;
        break;
      case 'vuln.update.service_now.queue':
        this.request.action = this.handling.action;
        this.request.user = this.handling.user.email;
        this.request.vulnerability = this.handling.vln.vulnerability;
        this.request.reference_id = this.handling.vln.reference_id.toString();
        this.request.comment = this.handling.comment;
        this.request.queue = {};
        this.request.queue.last_queue = this.handling.last_queue;
        this.request.queue.new_queue = this.handling.new_queue;
        break;
      case 'vuln.update.service_now.status':
        this.request.action = this.handling.action;
        this.request.user = this.handling.user.email;
        this.request.vulnerability = this.handling.vln.vulnerability;
        this.request.reference_id = this.handling.vln.reference_id.toString();
        this.request.comment = this.handling.comment;
        this.request.status = {};
        this.request.status.last_status = this.handling.last_status.desc;
        this.request.status.new_status = this.handling.new_status.desc;
        if (this.handling.new_substatus) {
          this.request.substatus = {};
          this.request.substatus.last_substatus = (this.handling.last_substatus) ? this.handling.last_substatus.desc : null;
          this.request.substatus.new_substatus = (this.handling.new_substatus) ? this.handling.new_substatus.desc : null;
        }
        break;

      case 'vuln.update.risk_acceptance':
        this.request.action = this.handling.action;
        this.request.user = this.handling.user.email;
        this.request.vulnerability = this.handling.vln.vulnerability;
        this.request.reference_id = this.handling.vln.reference_id.toString();
        this.request.comment = this.handling.comment;
        this.request.risk_acceptance = {};
        this.request.risk_acceptance.acceptance_at = this.handling.acceptance_at;
        this.request.risk_acceptance.deadline = this.handling.deadline;
        break;
    }
    var gr = new GlideRecord('x_glom_vln_event_vulnerability');
    gr.get(this._inserted);
    this.request.created_at = gr.sys_created_on.toString();
    this._log('Request body formatting done');
  },

  _log: function (msg) {
    gs.info('Event Process: ' + msg);
  },

  /**************************************************************************/
  /******************** Eventos para realização do POST *********************/
  /**************************************************************************/

  /************************** Evento de inserção **************************/
  insertEvent: function (obj, flag) {
    this._log('Insert Event started');
    if (!this.handling) this.handling = {};
    this.handling.action = 'vuln.create';

    //Tratamento do e-mail do usuário
    if (obj.user) {
      var user = this._getUser(obj.user);
      if (!user) throw new Error('Usuário não encontrado!');
      else this.handling.user = user;
    } else throw new Error('Parâmetro \'user\' não encontrado no objeto!');

    //Tratamento da vulnerabilidade
    if (!obj.vulnerability) throw new Error('Parâmetro \'vulnerability\' não encontrado no objeto!');
    else { //Parâmetro existe no objeto

      var vuln = this._getVuln(obj.vulnerability);

      if (vuln) { //Existe registro na tabela
        this.handling.vln = vuln;
      } else throw new Error('Vulnerabilidade não encontrada!');
    }

    if (!flag) this._registerEvent();
    else this._inserted = obj.sys_id;

    var res = this._apiPost();

    if (res.status == 200 || res.status == 201) {
      this._setSuccess(this._inserted, res.status);
    } else {
      this._setFailure(this._inserted, res.status);
    }

    this._log('Insert Event finished');

  },

  /***************************** Evento de acesso *****************************/
  accessEvent: function (obj, flag) {
    this._log('Access event started');
    if (!this.handling) this.handling = {};
    this.handling.action = 'vuln.access';

    //Tratamento do e-mail do usuário
    if (obj.user) {
      var user = this._getUser(obj.user);
      if (!user) throw new Error('Usuário não encontrado!');
      else this.handling.user = user;
    } else throw new Error('Parâmetro \'user\' não encontrado no objeto!');


    //Tratamento da vulnerabilidade
    if (!obj.vulnerability) throw new Error('Parâmetro \'vulnerability\' não encontrado no objeto!');
    else { //Parâmetro existe no objeto

      var vuln = this._getVuln(obj.vulnerability);

      if (vuln) { //Existe registro na tabela
        this.handling.vln = vuln;
      } else throw new Error('Vulnerabilidade não encontrada!');
    }

    if (!flag) this._registerEvent();
    else this._inserted = obj.sys_id;

    var res = this._apiPost();

    if (res.status == 200 || res.status == 201) {
      this._setSuccess(this._inserted, res.status);
    } else {
      this._setFailure(this._inserted, res.status);
    }
    this._log('Access event finished');
  },

  /************************* Evento de adição de comentários *************************/
  addCommentEvent: function (obj, flag) {
    this._log('Comment insert event started');
    if (!this.handling) this.handling = {};
    this.handling.action = 'vuln.update.comment';

    //Tratamento do e-mail do usuário
    if (obj.user) {
      var user = this._getUser(obj.user);
      if (!user) throw new Error('Usuário não encontrado!');
      else this.handling.user = user;
    } else throw new Error('Parâmetro \'user\' não encontrado no objeto!');


    //Tratamento da vulnerabilidade
    if (!obj.vulnerability) throw new Error('Parâmetro \'vulnerability\' não encontrado no objeto!');
    else { //Parâmetro existe no objeto

      var vuln = this._getVuln(obj.vulnerability);

      if (vuln) { //Existe registro na tabela
        this.handling.vln = vuln;
      } else throw new Error('Vulnerabilidade não encontrada!');
    }

    if (this._getComment()) this.handling.comment = this._getComment();
    else throw new Error('Comentário não encontrado');



    if (!flag) this._registerEvent();
    else this._inserted = obj.sys_id;

    var res = this._apiPost();

    if (res.status == 200 || res.status == 201) {
      this._setSuccess(this._inserted, res.status);
    } else {
      this._setFailure(this._inserted, res.status);
    }
    this._log('Comment insert event finished');

  },

  /*********************** Evento de mudança de fila ************************/
  queueChangeEvent: function (obj, flag) {
    this._log('Queue change event started');

    if (!this.handling) this.handling = {};
    this.handling.action = 'vuln.update.service_now.queue';

    //Tratamento do e-mail do usuário
    if (obj.user) {
      var user = this._getUser(obj.user);
      if (!user) throw new Error('Usuário não encontrado!');
      else this.handling.user = user;
    } else throw new Error('Parâmetro \'user\' não encontrado no objeto!');


    //Tratamento da vulnerabilidade
    if (!obj.vulnerability) throw new Error('Parâmetro \'vulnerability\' não encontrado no objeto!');
    else { //Parâmetro existe no objeto

      var vuln = this._getVuln(obj.vulnerability);

      if (vuln) { //Existe registro na tabela
        this.handling.vln = vuln;
      } else throw new Error('Vulnerabilidade não encontrada!');
    }
    if (this._getComment()) this.handling.comment = this._getComment();
    else throw new Error('Comentário não encontrado');

    if (!obj.last_queue) throw new Error('Parâmetro \'last_queue\' não encontrado no objeto!');
    this.handling.last_queue = obj.last_queue;

    if (!obj.new_queue) throw new Error('Parâmetro \'new_queue\' não encontrado no objeto!');
    this.handling.new_queue = obj.new_queue;

    if (!flag) this._registerEvent();
    else this._inserted = obj.sys_id;

    var res = this._apiPost();

    if (res.status == 200 || res.status == 201) {
      this._setSuccess(this._inserted, res.status);
    } else {
      this._setFailure(this._inserted, res.status);
    }
    this._log('Queue change event finished');
  },

  /*********************** Evento de mudança de Status ************************/
  stateChangeEvent: function (obj, flag) {
    this._log('State/Substate change event started');

    if (!this.handling) this.handling = {};
    this.handling.action = 'vuln.update.service_now.status';

    //Tratamento do e-mail do usuário
    if (obj.user) {
      var user = this._getUser(obj.user);
      if (!user) throw new Error('Usuário não encontrado!');
      else this.handling.user = user;
    } else throw new Error('Parâmetro \'user\' não encontrado no objeto!');


    //Tratamento da vulnerabilidade
    if (!obj.vulnerability) throw new Error('Parâmetro \'vulnerability\' não encontrado no objeto!');
    else { //Parâmetro existe no objeto

      var vuln = this._getVuln(obj.vulnerability);

      if (vuln) { //Existe registro na tabela
        this.handling.vln = vuln;
      } else throw new Error('Vulnerabilidade não encontrada!');
    }
    /*if (this._getComment()) this.handling.comment = this._getComment();
    else throw new Error('Comentário não encontrado');*/


    // Status
    if (!obj.last_status) throw new Error('Parâmetro \'last_status\' não encontrado no objeto!');
    if (!this._getStatus(obj.last_status)) throw new Error('Parâmetro \'last_status\' com valor inválido!');
    this.handling.last_status = this._getStatus(obj.last_status);

    if (!obj.new_status) throw new Error('Parâmetro \'new_status\' não encontrado no objeto!');
    if (!this._getStatus(obj.new_status)) throw new Error('Parâmetro \'new_status\' com valor inválido!');
    this.handling.new_status = this._getStatus(obj.new_status);

    // Substatus
    if (obj.last_substatus) this.handling.last_substatus = this._getSubstatus(obj.last_substatus);

    if (obj.new_substatus) this.handling.new_substatus = this._getSubstatus(obj.new_substatus);
    this._log('State Event Processed\n' + JSON.stringify(this.handling));

    if (!flag) this._registerEvent();
    else this._inserted = obj.sys_id;


    var res = this._apiPost();

    if (res.status == 200 || res.status == 201) {
      this._setSuccess(this._inserted, res.status);
    } else {
      this._setFailure(this._inserted, res.status);
    }

    this._log('State/Substate change event finished');

  },

  /************************* Evento aceite de risco **************************/
  acceptedRiskEvent: function (obj, flag) {
    this._log('Accepted Risk event started');

    if (!this.handling) this.handling = {};
    this.handling.action = 'vuln.update.risk_acceptance';

    //Tratamento do e-mail do usuário
    if (obj.user) {
      var user = this._getUser(obj.user);
      if (!user) throw new Error('Usuário não encontrado!');
      else this.handling.user = user;
    } else throw new Error('Parâmetro \'user\' não encontrado no objeto!');


    //Tratamento da vulnerabilidade
    if (!obj.vulnerability) throw new Error('Parâmetro \'vulnerability\' não encontrado no objeto!');
    else { //Parâmetro existe no objeto

      var vuln = this._getVuln(obj.vulnerability);

      if (vuln) { //Existe registro na tabela
        this.handling.vln = vuln;
      } else throw new Error('Vulnerabilidade não encontrada!');
    }

    if (!obj.acceptance_at) throw new Error('Parâmetro \'acceptance_at\' não encontrado no objeto!');
    this.handling.acceptance_at = obj.acceptance_at;
    if (!obj.deadline) throw new Error('Parâmetro \'deadline\' não encontrado no objeto!');
    this.handling.deadline = obj.deadline;

    if (!flag) this._registerEvent();
    else this._inserted = obj.sys_id;

    var res = this._apiPost();

    if (res.status == 200 || res.status == 201) {
      this._setSuccess(this._inserted, res.status);
    } else {
      this._setFailure(this._inserted, res.status);
    }
    this._log('Accepted Risk event finished');
  },

  /**************************************************************************/
  /*************************** Manipulação da API ***************************/
  /**************************************************************************/

  _apiPost: function () {
    this._log('POST on VulnFix API started');

    this._getBody();
    this._log('API Post initialized' + JSON.stringify(this.request));
    var res;
    try {
      var r = new sn_ws.RESTMessageV2('x_glom_vln.VulnfixEventAPI', 'event');
      r.setRequestBody(JSON.stringify(this.request));
      var response = r.executeAsync();
      var responseBody = response.getBody();
      var httpStatus = response.getStatusCode();
      res = {
        body: responseBody,
        status: httpStatus
      };
    } catch (ex) {
      res = ex.getMessage();
    }
    this._log('POST on VulnFix API finished');

    return res;
  },

  type: 'VulnfixEventUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>alpar.yuhri</sys_created_by>
        <sys_created_on>2018-10-23 12:15:21</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>116e3146db91e780704efd7aae9619c6</sys_id>
        <sys_mod_count>111</sys_mod_count>
        <sys_name>VulnfixEventUtils</sys_name>
        <sys_package display_value="Vulnerabilidade" source="x_glom_vln">3eacb81c0f96d300fd7f91dbe1050efe</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Vulnerabilidade">3eacb81c0f96d300fd7f91dbe1050efe</sys_scope>
        <sys_update_name>sys_script_include_116e3146db91e780704efd7aae9619c6</sys_update_name>
        <sys_updated_by>alpar.arthur</sys_updated_by>
        <sys_updated_on>2018-11-19 19:52:40</sys_updated_on>
    </sys_script_include>
</record_update>
