<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_glom_vln.VulnFixUtils</api_name>
        <client_callable>false</client_callable>
        <description>Script de utilidades para endpoint disponibilizado para a Globo Serviços</description>
        <name>VulnFixUtils</name>
        <script><![CDATA[var VulnFixUtils = Class.create();
VulnFixUtils.prototype = {
    initialize: function() {},
    _request: {},
    objSN: {},


    _isArray: function(obj) {
        return (obj.forEach) ? true : false; //verifica se é um array.
    },

    _removeXpecial: function(str) { //Remove o caractere especial.
        if (!str) return;
        str = str.replace(/ä|á|â|à|ã/gi, 'a');
        str = str.replace(/é|ë|è|ê/gi, 'e');
        str = str.replace(/î|í|ï|ì/gi, 'i');
        str = str.replace(/ö|ó|ò|õ|ô/gi, 'o');
        str = str.replace(/ü|ú|ù|û/gi, 'u');
        str = str.replace(/ç/gi, 'c');

        return str;

    },
    _getUserEmail: function(email) { //validação email
        if (!email) return;
        var gr = new GlideRecord('sys_user');
        gr.addEncodedQuery('email=' + email);
        gr.query();
        if (gr.next()) {
            return gr.sys_id;
        } else return null;

    },

    _verifyClassification: function(classification) { //Validação da classificação
        if (!classification) return;
        switch (this._removeXpecial(classification).toLowerCase()) {
            case 'low':
            case 'baixa':
            case 'baixo':
                return 104;
            case 'high':
            case 'alta':
            case 'alto':
                return 102;
            case 'informational':
            case 'informacional':
                return 105;
            case 'critical':
            case 'critica':
            case 'critico':
                return 101;
            case 'medium':
            case 'media':
            case 'medio':
                return 103;
        }
    },

    _getFirstAnalysis: function(id) {
        var gr = new GlideRecord('task_sla');
        gr.addEncodedQuery('task=' + id);
        gr.query();

        if (gr.next()) {
            if (gr.planned_end_time) return gr.planned_end_time.toString();
        }

        return null;

    },

    toSN: function() {
        var aux = null;
        var aux2 = null;

        this.objSN.exists = [];

        this.objSN.correlation_id = this._request.id;
        this.objSN.short_description = this._request.title;

        /**************************************************************************/
        /*********************** Trata objetos de descrição ***********************/
        /**************************************************************************/
        if (this._request.description !== undefined) {
            if (this._isArray(this._request.description)) {
                //É array
                this._request.description.forEach(function(val) {
                    if (aux == null) aux = '';
                    // é um array
                    aux += (val) ? val : '';
                });
            } else {
                //É um objeto
                aux = (this._request.description) ? this._request.description : '';
            } //End else _isArray
        }
        if (this._request.solution !== undefined) {

            if (this._isArray(this._request.solution)) {
                //É array
                this._request.solution.forEach(function(val) {
                    if (aux2 == null) aux2 = '';
                    aux2 += (val) ? val : '';
                });
            } else {
                //É um objeto
                aux2 = (this._request.solution) ? this._request.solution : '';
            }
        } //End else _isArray
        if ((this._request.description == null || this._request.description == '') && (this._request.solution != null && this._request.solution != '')) {
            this.objSN.description = aux2;
        }
        if ((this._request.description != null && this._request.description != '') && (this._request.solution == null || this._request.solution == '')) {
            this.objSN.description = aux;
        }
        if ((this._request.description != null && this._request.description != '') && (this._request.solution != null && this._request.solution != '')) {
            this.objSN.description = aux + aux2;
        }

        if (this._request.comments) {
            if (this._isArray(this._request.comments)) {
                //É array
                var com = [];
                this._request.comments.forEach(function(val) {
                    com.push('Comentário. \n\nUsuário: ' + val.user + '\nComentário: ' + val.comment + '\nData: ' + val.date + '\n\n'); //End push
                }); //End ForEach
                this.objSN.comments = com;
            }
        }

        /**************************************************************************/
        /************************* Trata string de Status *************************/
        /**************************************************************************/
        if (this._request.service_now) {
            if (this._request.service_now.status !== undefined) {
                switch (this._removeXpecial(this._request.service_now.status).toUpperCase()) {
                    case "AGUARDANDO ANALISE":
                        this.objSN.state = 100;
                        break;
                    case "EM ANALISE":
                        this.objSN.state = 101;
                        break;
                    case "SOLUCIONADO":
                        this.objSN.state = 102;
                        break;
                    case "CANCELADO":
                        this.objSN.state = 103;
                        break;
                    case "RISCO ACEITO":
                        this.objSN.state = 104;
                        break;
                    case "AGUARDANDO TRATAMENTO":
                        this.objSN.state = 105;
                        break;
                    case "EM TRATAMENTO":
                        this.objSN.state = 106;
                        break;
                    case "EM AVALICACAO":
                        this.objSN.state = 107;
                        break;
                    case "FINALIZADO":
                        this.objSN.state = 108;
                } //End Case Status

            }

            if (this._request.service_now.substatus !== undefined && this._request.service_now.substatus !== '') {
                switch (this._removeXpecial(this._request.service_now.substatus).toUpperCase()) {
                    case "ACORDO DE RISCO":
                        this.objSN.substatus = 200;
                        break;
                    case "FILA ALTERADA":
                        this.objSN.substatus = 201;
                        break;
                    case "PENDENTE FORNECEDOR":
                        this.objSN.substatus = 202;
                        break;
                    case "DEPENDENTE DE CHG":
                        this.objSN.substatus = 203;
                        break;
                    case "EM AVALIACAO":
                        this.objSN.substatus = 204;
                        break;
                    case "PENDENTE PARCEIRO/UN":
                        this.objSN.substatus = 207;
                        break;
                }
            }
            if (this._request.service_now.queue_id !== undefined) {
                this.objSN.assignment_group = this._request.service_now.queue_id.trim();
            }
            if (this._request.service_now.user !== undefined) {
                this.objSN.opened_by = this._getUserEmail(this._request.service_now.user);
            }
            if (this._request.service_now.inherit_solution !== undefined) {
                this.objSN.solucao_herdada = this._request.service_now.inherit_solution;
            }
        }

        /**************************************************************************/
        /************************** Trata classification **************************/
        /**************************************************************************/
        if (this._request.cvss != undefined) {
            if (this._request.cvss.classification != undefined) {
                this.objSN.classification = this._request.cvss.classification;
            }
        }
        if (this._request.info) {
            if (this._request.info.type) {
                this.objSN.type = this._request.info.type;

                if (this._request.info.type == 'infra') {
                    this.objSN.url_ou_ip = (this._request.info.infra.ip) ? this._request.info.infra.ip : 'Não informado';
                    if (this._request.info.infra.service) {
                        this.objSN.url_ou_ip += (this._request.info.infra.service.port) ? ':' + this._request.info.infra.service.port : '';
                    }
                } else if (this._request.info.type == 'webapp') {
                    this.objSN.url_ou_ip = (this._request.info.webapp.ip) ? this._request.info.webapp.ip : 'Não informado';
                } else if (this._request.info.type == 'code') {
                    this.objSN.url_ou_ip = (this._request.info.code.repo) ? this._request.info.code.repo : 'Não informado';
                }
            }
        }

        /**************************************************************************/
        /************************** Tratamento References *************************/
        /**************************************************************************/
        if (this._request.references) {
            if (this._isArray(this._request.references)) {
                var aux = '';
                this._request.references.forEach(function(val, id) {
                    aux += 'Referência ' + id + ' =========\n';
                    aux += 'Fonte:' + val.source + '\n';
                    aux += 'Referência:' + val.reference + '\n\n';
                });

                this.objSN.reference = aux;
            } //End if is array
            else {
                this.objSN.reference = 'Fonte:' + this._request.references.source + '\nReferência:' + this._request.references.reference;
            } //End else is array
        }

        /**************************************************************************/
        /********************** Tratamento do classification **********************/
        /**************************************************************************/

        if (this._request.cvss)
            if (this._request.cvss.classification) {
                this.objSN.classification = this._verifyClassification(this._request.cvss.classification);
            }

        /**************************************************************************/
        /*************** Tratamento dos componentes e subcomponentes **************/
        /**************************************************************************/
        if (this._request.service_now)
            if (this._request.service_now.component_id !== undefined) {
                var grComp = new GlideRecord('u_componente_dicionario');
                grComp.get(this._request.service_now.component_id);

                if (grComp.u_nome != '' && grComp.u_nome != undefined) {
                    this.objSN.componente = grComp.u_nome.getDisplayValue();
                } else {
                    var grSub = new GlideRecord('u_subcomponente');
                    grSub.get(this._request.service_now.component_id);

                    if (grSub.u_nome != '' && grSub.u_nome != undefined) {
                        this.objSN.subcomponente = grSub.u_nome.getDisplayValue();
                        this.objSN.componente = grSub.u_componente.getDisplayValue();
                    }
                }
            }

        /**************************************************************************/
        /********************** Tratamento do aceite de risco *********************/
        /**************************************************************************/
        if (this._request.risk_acceptance) {
            if (this._isArray(this._request.risk_acceptance)) {
                if (this._request.risk_acceptance[0]) {

                    if (this._request.risk_acceptance[0].user) {
                        this.objSN.risk_acceptance = {};
                        this.objSN.risk_acceptance.user = this._request.risk_acceptance[0].user;
                    }
                    if (this._request.risk_acceptance[0].acceptance_at) {
                        this.objSN.acordo_de_risco = new GlideDateTime(this._request.risk_acceptance[0].acceptance_at).getDate().getValue();
                    }
                    if (this._request.risk_acceptance[0].deadline) {
                        this.objSN.risco_data_estimada = new GlideDateTime(this._request.risk_acceptance[0].deadline).getDate().getValue();
                    }
                }
            } else {
                if (this._request.risk_acceptance) {

                    if (this._request.risk_acceptance.user) {
                        this.objSN.risk_acceptance = {};
                        this.objSN.risk_acceptance.user = this._request.risk_acceptance.user;
                    }
                    if (this._request.risk_acceptance.acceptance_at) {
                        this.objSN.acordo_de_risco = new GlideDateTime(this._request.risk_acceptance.acceptance_at).getDate().getValue();
                    }
                    if (this._request.risk_acceptance.deadline) {
                        this.objSN.risco_data_estimada = new GlideDateTime(this._request.risk_acceptance.deadline).getDate().getValue();
                    }
                }
            }
        }


    },
    //End função toSN

    setReq: function(req) {
        this._request = req;
    },
    create: function() {
        var gr = new GlideRecord('x_glom_vln_requisicoes');
        gr.initialize();
        gr.correlation_id = this.objSN.correlation_id;
        gr.short_description = this.objSN.short_description;
        gr.description = this.objSN.description;
        gr.state = parseInt(this.objSN.state);
        gr.substatus = this.objSN.substatus;
        gr.assignment_group = this.objSN.assignment_group;
        gr.opened_by = this.objSN.opened_by;
        gr.componente = this.objSN.componente; // Diferenciar componente de subcomponente
        gr.subcomponente = this.objSN.subcomponente; // Diferenciar componente de subcomponente
        gr.solucao_herdada = this.objSN.solucao_herdada;
        gr.classification = this.objSN.classification;
        gr.type = this.objSN.type;
        gr.acordo_de_risco = this.objSN.risco_data_estimada ? this.objSN.risco_data_estimada : null;
        gr.url_ou_ip = this.objSN.url_ou_ip;
        gr.reference = this.objSN.reference;
        var id = gr.insert();

        gr.get(id);
        //MAP, FILTER, FOREACH E REDUCE
        // this.objSN.limite_analise_inicial = this._getFirstAnalysis(id);
        this.objSN.limite_para_analise_inicial = this._getFirstAnalysis(id);
        // gr.limite_analise_inicial = (this.objSN.limite_analise_inicial) ? this.objSN.limite_analise_inicial : null;
        gr.limite_para_analise_inicial = (this.objSN.limite_para_analise_inicial) ? this.objSN.limite_para_analise_inicial : null;

        if (this.objSN.comments) {
            this.objSN.comments.forEach(function(comment) {
                gr.comments = comment;
                gr.update();
            });
        }
    },

    getVulnerability: function(corr_id) {
        var gr = new GlideRecord('x_glom_vln_requisicoes');
        gr.addEncodedQuery('correlation_id=' + corr_id);
        gr.query();

        var res = {};

        if (gr.next()) {
            for (var fieldName in gr) {
                if (gr[fieldName]) {
                    if (gr[fieldName].getDisplayValue) {

                        res[fieldName] = gr[fieldName].getDisplayValue();
                    } else {
                        res[fieldName] = gr[fieldName];
                    }
                }
            }
        }

        return res;
    },

    putVulnerability: function() {
        var gr = new GlideRecord('x_glom_vln_requisicoes');
        gr.addEncodedQuery('correlation_id=' + this.objSN.correlation_id);
        gr.query();

        var id;
        if (gr.next()) {
            id = gr.sys_id;
            //Fila alterada
			if(this._request.service_now){
            if (this._request.service_now.queue_id) {
                gr.assignment_group = this.objSN.assignment_group;
                if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração de fila. \n\nUsuário: ' + this._request.service_now.user + '\nFila: ' + this._getGroup(this.objSN.assignment_group));
            }
							if(this._request.service_now.associated_chg) {
				gr.chg_associada = this._request.service_now.associated_chg;
				/*if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração de CHG Associada. \n\nUsuário: ' + this._request.service_now.user + '\nCHG Associada: ' + gr.chg_associada.getDisplayValue());*/
			}
			if(this._request.service_now.partner_un_group) {
				gr.grupo_de_atuacao_do_parceiro_un = this._request.service_now.partner_un_group;
				if (!this.objSN.comments) this.objSN.comments = [];
                /*this.objSN.comments.push('Alteração do Grupo de atuação do Parceiro / UN. \n\nUsuário: ' + this._request.service_now.user + '\nGrupo de atuação: ' + gr.grupo_de_atuacao_do_parceiro_un.getDisplayValue());*/
			}
			if(this._request.service_now.provider) {
				gr.fornecedor = this._request.service_now.provider;
			/*	if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração do Fornecedor. \n\nUsuário: ' + this._request.service_now.user + '\nFornecedor: ' + gr.fornecedor.getDisplayValue());*/
			}
			if(this._request.service_now.assigned_to) {
				gr.assigned_to = this._request.service_now.assigned_to;
				/*	if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração do Responsável pela Tarefa. \n\nUsuário: ' + this._request.service_now.user + '\nUsuário: ' + gr.assigned_to.getDisplayValue());*/
			}
			if(this._request.service_now.estimated_date) {
				gr.data_estimada = this._request.service_now.estimated_date;
			/*	if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração da Estimativa para conclusão do tratamento. \n\nUsuário: ' + this._request.service_now.user + '\nData: ' + gr.data_estimada.getDisplayValue());*/
			}
			if(this._request.service_now.partner_un) {
				gr.parceiro_un = this._request.service_now.partner_un;
				/*if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração do Parceiro / UN. \n\nUsuário: ' + this._request.service_now.user + '\nParceiro / UN: ' + gr.parceiro_un.getDisplayValue());*/
			}
			if (this._request.service_now.component_id) {
                var grComp = new GlideRecord('u_componente_dicionario');
                grComp.get(this._request.service_now.component_id);

                if (grComp.u_nome != '' && grComp.u_nome != undefined) {
                    gr.componente = grComp.u_nome.getDisplayValue();
                } else {
                    var grSub = new GlideRecord('u_subcomponente');
                    grSub.get(this._request.service_now.component_id);

                    if (grSub.u_nome != '' && grSub.u_nome != undefined) {
                        gr.subcomponente = grSub.u_nome.getDisplayValue();
                        gr.componente = grSub.u_componente.getDisplayValue();
                    }
                }
            }
				            if (this._request.service_now.status !== undefined && this._request.service_now.status !== '') {
                gr.state = this.objSN.state;
                if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração de status. \n\nUsuário: ' + this._request.service_now.user + '\nStatus: ' + gr.state.getDisplayValue());
            }
            if (this._request.service_now.substatus !== undefined && this._request.service_now.substatus !== '') {
				if(this._request.service_now.substatus == '0') {
				   this.objSN.substatus = " ";
				}
                gr.substatus = this.objSN.substatus;
                if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração de substatus. \n\nUsuário: ' + this._request.service_now.user + '\nSubstatus: ' + gr.substatus.getDisplayValue());
            }
				            if (this._request.service_now.inherit_solution) {
                gr.solucao_herdada = this._request.service_now.inherit_solution;
            }
			}
            if (this._request.description) {
                gr.description = this.objSN.description;
                if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração de descrição. \n\nUsuário: ' + this._request.service_now.user + '\nDescrição: ' + this.objSN.description);
            }
            if (this._request.short_description) {
                gr.short_description = this.objSN.short_description;
            }
            if (this._request.cvss)
                if (this._request.cvss.classification) {
                    gr.classification = this._verifyClassification(this._request.cvss.classification);
                    if (!this.objSN.comments) this.objSN.comments = [];
                    this.objSN.comments.push('Alteração de classificação de risco. \n\nUsuário: ' + this._request.service_now.user + '\nClassificação de Risco: ' + gr.classification.getDisplayValue());
                }
            if (this._request.info) {
                if (this._request.info.type) {
                    gr.type = this._request.info.type;
                    if (this._request.info.type == 'infra') {
                        gr.url_ou_ip = (this._request.info.infra.ip) ? this._request.info.infra.ip : 'Não informado';
                        if (this._request.info.infra.service) {
                            gr.url_ou_ip += (this._request.info.infra.service.port) ? ':' + this._request.info.infra.service.port : '';
                        }
                    } else if (this._request.info.type == 'webapp') {
                        gr.url_ou_ip = (this._request.info.webapp.ip) ? this._request.info.webapp.ip : 'Não informado';
                    } else if (this._request.info.type == 'code') {
                        gr.url_ou_ip = (this._request.info.code.repo) ? this._request.info.code.repo : 'Não informado';
                    }
                }
            }
            if (this._request.risk_acceptance) {
                gr.acordo_de_risco = this.objSN.risco_data_estimada;
				
                if (!this.objSN.comments) this.objSN.comments = [];
                this.objSN.comments.push('Alteração do limite de risco. \n\nUsuário: ' + this.objSN.risk_acceptance.user + '\nData limite de risco: ' + this.objSN.risco_data_estimada.split("-").reverse().join('/') + '\nAceito em: ' + this.objSN.acordo_de_risco.split("-").reverse().join('/'));
            }
            gr.update();
        }
        gr.get(id);

        if (this.objSN.comments) {
            this.objSN.comments.forEach(function(comment) {
                gr.comments = comment;
                gr.update();
            });
        }
        return {
            res: 'Alterações realizadas com sucesso!'
        };
    },

    _getGroup: function(id) {
        var gr = new GlideRecord("sys_user_group");
        gr.addEncodedQuery("sys_id=" + id);
        gr.query();
        if (gr.next()) {
            return gr.name.getDisplayValue();
        } else {
            return "Fila não encontrada";
        }
    },

    type: 'VulnFixUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>alpar.arthur</sys_created_by>
        <sys_created_on>2018-10-17 15:16:20</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>576eaf40db91a380530ef33eae961900</sys_id>
        <sys_mod_count>188</sys_mod_count>
        <sys_name>VulnFixUtils</sys_name>
        <sys_package display_value="Vulnerabilidade" source="x_glom_vln">3eacb81c0f96d300fd7f91dbe1050efe</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Vulnerabilidade">3eacb81c0f96d300fd7f91dbe1050efe</sys_scope>
        <sys_update_name>sys_script_include_576eaf40db91a380530ef33eae961900</sys_update_name>
        <sys_updated_by>marcos.santos@alpar.com.br</sys_updated_by>
        <sys_updated_on>2018-11-16 16:17:42</sys_updated_on>
    </sys_script_include>
</record_update>
